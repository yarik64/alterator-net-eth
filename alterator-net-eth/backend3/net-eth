#!/bin/sh

################### shell file helpers

run_ifup()
{
    env -i PATH="$PATH" HOME="$HOME" TMPDIR="$TMPDIR" /sbin/ifup "$1" >/dev/null
}

run_ifdown()
{
    env -i PATH="$PATH" HOME="$HOME" TMPDIR="$TMPDIR" /sbin/ifdown "$1" >/dev/null
}

ifdumptool="/etc/net/scripts/contrib/ifdump"
ifup="run_ifup"
ifdown="run_ifdown"


. /etc/net/scripts/functions


shell_add_or_subst()
{
	local name="$1" && shift
	local value="$1" && shift
	local file="$1" && shift

	[ -f "$file" ] || touch "$file"
	if grep -qs "^$name" "$file"; then
		/bin/sed -r -i "s,^$name.*,$name$value," -- "$file"
		return 0
	fi
	printf %s\\n "$name$value" >> "$file"
}

shell_get()
{
	local name="$1" && shift
	local file="$1" && shift

	[ -f "$file" ] &&
	grep -qs "^$name=" "$file" &&
	grep "^$name=" "$file"|sed "s,^$name=,,"
}

################### interface modificators
update_iftab()
{
    local IFTAB_CONFIG="/etc/iftab"
    /sbin/ip -o a l|
	sed -nre 's|^[0-9]+: ([^:]+): [^/]* link/ether ([a-f0-9:]+).*|\1 \2|p'|
	while read name mac;do	    
	    [ "00:00:00:00:00:00" = "$mac" ] && continue # avoid wrong mac addresses from broken drivers (like rt61)
	    
	    if grep -qs "^$name[[:space:]]" "$IFTAB_CONFIG";then
		sed -r -e "s,^($name[[:space:]]+mac[[:space:]]+).*,\1$mac," -i "$IFTAB_CONFIG"
	    else
		printf "%s\tmac %s\n" "$name" "$mac" >>"$IFTAB_CONFIG"
	    fi
	done
}

list_mask()
{
    for i in `seq 32 -1 0`; do 
        printf '("%s" label "/%s (%s)")' "$i" "$i" "$(maskname "$i")"
    done
}

list_iface()
{
    /sbin/ip -o a l|
        sed -ne 's|^[0-9]\+: \([^:]\+\): [^/]* link/ether .*|\1|p'|
        while read iface; do
            printf '("%s" label "%s (%s)")' "$iface" "$iface" "$(ifaceinfo "$iface")"
        done
}

restart_iface()
{
    "$ifdown" "$1" && "$ifup" "$1"
}

restart_all_ifaces() {
    /sbin/ip -o a l|
        sed -ne 's|^[0-9]\+: \([^:]\+\): [^/]* link/ether .*|\1|p'|
        while read iface; do
		restart_iface "$iface"
        done >&2
}

is_up_iface()
{
    /sbin/ip -o link show dev "$1" 2>/dev/null |cut -d' ' -f3 |grep -qs -- '[<,]UP[,>]'
}

is_plug_iface()
{
   /usr/sbin/ifplugstatus "$1" >/dev/null 2>/dev/null
   echo "$?"
}
	      

read_iface()
{
	local name="$1" && shift
	echo "("
	
	#collect general information
	local info=
	is_up_iface "$name" && info="`_ "interface is up"`" || info="`_ "interface is down"`"
	
	[ -d "/sys/class/net/$name/wireless" ] ||
	    case "$(is_plug_iface "$name")" in
		2) info="$info, `_ "plugged"`"   ;;
		3) info="$info, `_ "unplugged"`" ;;
	    esac

	printf 'info "%s"' "$info"

	printf 'wireless %s' "$([ -d "/sys/class/net/$name/wireless" ] && echo "#t" || echo "#f")"

	local addr= ip= mask=
	local BOOTPROTO= DISABLED=
	[ ! -s "/etc/net/ifaces/$name/ipv4address" ] ||
		addr=$(grep '^[0-9]' "/etc/net/ifaces/$name/ipv4address" | head -n1 || echo "")

	if [ -n "$addr" ]; then
		ip="${addr%%/*}"
		mask="${addr#$ip}"; mask="${mask#/}"
		
		printf 'ip "%s" mask "%s"\n' "$ip" "${mask:-32}"
	fi

	[ ! -s "/etc/net/ifaces/$name/ipv4route" ] ||
		printf 'default "%s"\n' \
			$(grep '^default' "/etc/net/ifaces/$name/ipv4route" | sed -r 's,default[[:space:]]+via[[:space:]],,' || echo "")

	([ -d "/etc/net/ifaces/$name" ] && eval $("$ifdumptool" "$name")
	 [ "$BOOTPROTO" = "dhcp" ] && echo "dhcp #t" || echo "dhcp #f")

	echo ")"
}

write_iface()
{
	local name="$1" && shift
	local ifacedir="/etc/net/ifaces/$name"
	local options="$ifacedir/options"

	[ -d "$ifacedir" ] || mkdir "$ifacedir"
	
	[ -n "$in_mask" ] && [ -n "$in_ip" ] && \
		printf '%s/%s\n' "$in_ip" "$in_mask" >"/etc/net/ifaces/$name/ipv4address"
	[ -n "$in_default" ] &&
		printf 'default via %s\n' "$in_default" >"/etc/net/ifaces/$name/ipv4route"

	shell_add_or_subst "TYPE=" "eth" "$options"

	[ -n "$in_dhcp" ] &&
		shell_add_or_subst "BOOTPROTO=" \
			$([ "$in_dhcp" = "#t" ] && echo "dhcp" || echo "static")\
			"$options"
}

_()
{
LANG=${in_language%%;*}.utf8 gettext "alterator-net-eth" "$1"
}

. /usr/share/alterator/build/backend3.sh

#initial actions
run_ifup lo
update_iftab

on_message()
{
	case "$in_action" in
		constraints)
			echo '('
			printf 'info (label "%s")' "`_ "Interface state"`"
			printf 'dhcp (exclude (#t ip) exclude (#t default) exclude (#t mask) default #f label "%s")' \
				"`_ "Use DHCP"`"
			printf 'ip (required #t ipv4-address #t label "%s")' \
				"`_ "IP address"`"
			printf 'default (ipv4-address #t label "%s")' \
				"`_ "Default gateway"`"
			printf 'mask (label "%s")' \
				"`_ "NetMask"`"
			echo ')'
			;;
		list)
			echo '('
			if [ "$in__objects" == "/" ];then
				list_iface
			else
				list_mask
			fi
			echo ')'
			;;
		read) 
			if [ "$in__objects" == "/" ];then
				echo '()'
			else
				read_iface "${in__objects}"
			fi
			;;
		write)
			write_iface "${in__objects}"
			[ "$in_restart" = "#f" ] || restart_iface "$in__objects"
			echo '()'
			;;
		restart)
			restart_all_ifaces
			echo '()'
			;;
		*)
			echo '#f'
			;;
	esac
}

message_loop
